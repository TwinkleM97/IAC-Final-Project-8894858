AWSTemplateFormatVersion: '2010-09-09'
Description: 'CFN: Public MySQL RDS for assignment demo (creates its own VPC with IGW + public subnets)'
Parameters:
  DBName: { Type: String, Default: proj8870db }
  MasterUsername: { Type: String, Default: adminuser }
  MasterPassword: { Type: String, NoEcho: true }
  DBInstanceClass: { Type: String, Default: db.t3.micro }
  AllocatedStorage: { Type: Number, Default: 20 }

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.40.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: cfn-rds-vpc }]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: cfn-rds-igw }]

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.40.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: cfn-rds-public-a }]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.40.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: cfn-rds-public-b }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: cfn-rds-rt-public }]

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  RTAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  RTAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open MySQL (demo only)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: cfn-rds-sg }]

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: public subnets for demo
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags: [{ Key: Name, Value: cfn-rds-dbsubnetgroup }]

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref AllocatedStorage
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: [ !Ref SG ]
      PubliclyAccessible: true
      DeletionProtection: false
      BackupRetentionPeriod: 0
      # Keep identifiers auto-generated by CFN to avoid name collisions
Outputs:
  RDSEndpoint: { Value: !GetAtt RDS.Endpoint.Address }
  RDSPort:     { Value: !GetAtt RDS.Endpoint.Port }
